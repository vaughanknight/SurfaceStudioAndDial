#pragma kernel Poisson

RWStructuredBuffer<float> _Pressure;
RWStructuredBuffer<float> _Divergence;
RWStructuredBuffer<float2> _Obstacles;
RWStructuredBuffer<float> _Output;
const uint2 _Size;

uint4 GetNeighbours(int2 pos, int2 size)
{
	uint4 result;
	const int maxX = size.x-1;
	const int maxY = size.y-1;

	result.x = pos.y*_Size.x					+ clamp(pos.x-1, 0, maxX);
	result.y = pos.y*_Size.x					+ clamp(pos.x+1, 0, maxX);
	result.z = clamp(pos.y-1, 0, maxY)*size.x	+ pos.x;
	result.w = clamp(pos.y+1, 0, maxY)*size.x	+ pos.x;
	return result;
}

[numthreads(32, 32, 1)]
void Poisson(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _Size.x || id.y >= _Size.y) { return; }
	const uint pos = id.y*_Size.x + id.x;

	//const float alpha = -1.0f;
	const float rbeta = 0.25;

	const uint4 n = GetNeighbours(id.xy, _Size);

	float p = _Pressure[pos];


	const float2 obsL = _Obstacles[n.x];
	const float2 obsR = _Obstacles[n.y];
	const float2 obsB = _Obstacles[n.z];
	const float2 obsT = _Obstacles[n.w];

	const float x1 = (obsL.x > 0.0 || obsL.y > 0.0) ? p : _Pressure[n.x];
	const float x2 = (obsR.x > 0.0 || obsR.y > 0.0) ? p : _Pressure[n.y];
	const float y1 = (obsB.x > 0.0 || obsB.y > 0.0) ? p : _Pressure[n.z];
	const float y2 = (obsT.x > 0.0 || obsT.y > 0.0) ? p : _Pressure[n.w];

	const float b = _Divergence[pos];

	_Output[pos] = (x1 + x2 + y1 + y2 - b) * rbeta;
}
