#pragma kernel CalcVorticity

RWStructuredBuffer<float2> _Velocity;
RWStructuredBuffer<float> _Output;
const uint2 _Size;

uint4 GetNeighbours(int2 pos, int2 size)
{
	uint4 result;
	const int maxX = size.x-1;
	const int maxY = size.y-1;

	result.x = pos.y*_Size.x					+ clamp(pos.x-1, 0, maxX);
	result.y = pos.y*_Size.x					+ clamp(pos.x+1, 0, maxX);
	result.z = clamp(pos.y-1, 0, maxY)*size.x	+ pos.x;
	result.w = clamp(pos.y+1, 0, maxY)*size.x	+ pos.x;
	return result;
}

[numthreads(32, 32, 1)]
void CalcVorticity(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _Size.x || id.y >= _Size.y) { return; }
	const uint pos = id.y*_Size.x + id.x;
	const uint4 n = GetNeighbours(id.xy, _Size);

	const float2 vL = _Velocity[n.x];
	const float2 vR = _Velocity[n.y];
	const float2 vB = _Velocity[n.z];
	const float2 vT = _Velocity[n.w];

	_Output[pos] = 0.5 * ((vR.y - vL.y) - (vT.x - vB.x));
}
