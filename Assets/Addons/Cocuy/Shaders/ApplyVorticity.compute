#pragma kernel ApplyVorticity

RWStructuredBuffer<float2> _VelocityIn;
RWStructuredBuffer<float> _Vorticity;
RWStructuredBuffer<float2> _VelocityOut;
float _VorticityScale;
float _ElapsedTime;
const uint2 _Size;

uint4 GetNeighbours(int2 pos, int2 size)
{
	uint4 result;
	const int maxX = size.x-1;
	const int maxY = size.y-1;

	result.x = pos.y*_Size.x					+ clamp(pos.x-1, 0, maxX);
	result.y = pos.y*_Size.x					+ clamp(pos.x+1, 0, maxX);
	result.z = clamp(pos.y-1, 0, maxY)*size.x	+ pos.x;
	result.w = clamp(pos.y+1, 0, maxY)*size.x	+ pos.x;
	return result;
}

[numthreads(32, 32, 1)]
void ApplyVorticity(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _Size.x || id.y >= _Size.y) { return; }
	uint pos = id.y*_Size.x + id.x;

	uint4 n = GetNeighbours(id.xy, _Size);

	float vL = _Vorticity[n.x];
	float vR = _Vorticity[n.y];
	float vB = _Vorticity[n.z];
	float vT = _Vorticity[n.w];
	float vC = _Vorticity[pos];

	float2 force = 0.5 * float2(abs(vT) - abs(vB), abs(vR) - abs(vL));

	float EPSILON = 2.4414e-4;
	float magSqr = max(EPSILON, dot(force, force)); 
	force = force * rsqrt(magSqr);

	force *= _VorticityScale * vC * float2(1, -1);
	float2 final_force = force * _ElapsedTime;

	_VelocityOut[pos] = _VelocityIn[pos] + float2(final_force.x, final_force.y);
}
